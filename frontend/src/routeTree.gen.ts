/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as LayoutImport } from './routes/layout'
import { Route as IndexImport } from './routes/index'
import { Route as LayoutPage2Import } from './routes/_layout/page2'
import { Route as LayoutPage1Import } from './routes/_layout/page1'

// Create/Update Routes

const LayoutRoute = LayoutImport.update({
  id: '/layout',
  path: '/layout',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const LayoutPage2Route = LayoutPage2Import.update({
  id: '/_layout/page2',
  path: '/page2',
  getParentRoute: () => rootRoute,
} as any)

const LayoutPage1Route = LayoutPage1Import.update({
  id: '/_layout/page1',
  path: '/page1',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/layout': {
      id: '/layout'
      path: '/layout'
      fullPath: '/layout'
      preLoaderRoute: typeof LayoutImport
      parentRoute: typeof rootRoute
    }
    '/_layout/page1': {
      id: '/_layout/page1'
      path: '/page1'
      fullPath: '/page1'
      preLoaderRoute: typeof LayoutPage1Import
      parentRoute: typeof rootRoute
    }
    '/_layout/page2': {
      id: '/_layout/page2'
      path: '/page2'
      fullPath: '/page2'
      preLoaderRoute: typeof LayoutPage2Import
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/layout': typeof LayoutRoute
  '/page1': typeof LayoutPage1Route
  '/page2': typeof LayoutPage2Route
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/layout': typeof LayoutRoute
  '/page1': typeof LayoutPage1Route
  '/page2': typeof LayoutPage2Route
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/layout': typeof LayoutRoute
  '/_layout/page1': typeof LayoutPage1Route
  '/_layout/page2': typeof LayoutPage2Route
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/layout' | '/page1' | '/page2'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/layout' | '/page1' | '/page2'
  id: '__root__' | '/' | '/layout' | '/_layout/page1' | '/_layout/page2'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  LayoutRoute: typeof LayoutRoute
  LayoutPage1Route: typeof LayoutPage1Route
  LayoutPage2Route: typeof LayoutPage2Route
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  LayoutRoute: LayoutRoute,
  LayoutPage1Route: LayoutPage1Route,
  LayoutPage2Route: LayoutPage2Route,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/layout",
        "/_layout/page1",
        "/_layout/page2"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/layout": {
      "filePath": "layout.tsx"
    },
    "/_layout/page1": {
      "filePath": "_layout/page1.tsx"
    },
    "/_layout/page2": {
      "filePath": "_layout/page2.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
